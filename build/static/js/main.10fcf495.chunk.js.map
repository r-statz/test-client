{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","submitForm","a","async","fetch","method","credentials","headers","Accept","body","JSON","stringify","state","emailResponse","json","console","log","toName","toEmail","subject","handleInputChange","bind","event","target","value","name","this","setState","onChange","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6QAqFeA,E,YAlFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,WAAa,0BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEmBE,MAAM,+CAAgD,CAC9EC,OAAQ,OACRC,YAAa,cACbC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,EAAKC,UATrB,cAEHC,EAFG,kBAAAX,EAAA,MAWaW,EAAcC,QAX3B,8DAaTC,QAAQC,IAAR,KAAe,KAbN,yDAVX,EAAKJ,MAAQ,CACXK,OAAQ,GACRC,QAAS,GACTC,QAAS,GACTV,KAAM,IAER,EAAKW,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKpB,WAAa,EAAKA,WAAWoB,KAAhB,gBATD,E,+EA8BDC,GAChB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KAEpBC,KAAKC,SAAL,eACGF,EAAOD,M,+BAKV,OACE,8BACE,0CAEE,2BACEC,KAAK,SACLD,MAAOE,KAAKd,MAAMK,OAClBW,SAAUF,KAAKN,qBAGnB,6BACA,2CAEE,2BACEK,KAAK,UACLD,MAAOE,KAAKd,MAAMM,QAClBU,SAAUF,KAAKN,qBAGnB,gDAEE,2BACEK,KAAK,UACLD,MAAOE,KAAKd,MAAMO,QAClBS,SAAUF,KAAKN,qBAGnB,6CAEE,2BACEK,KAAK,OACLD,MAAOE,KAAKd,MAAMH,KAClBmB,SAAUF,KAAKN,qBAGnB,4BAAQS,QAASH,KAAKzB,YAAtB,e,GA7EU6B,aCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjC,QACf2B,UAAUC,cAAcQ,WAK1BjC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBiC,OAAM,SAAAC,GACLnC,QAAQmC,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,GAAN,sBAEPzB,IAiDV,SAAiCO,GAE/BlC,MAAMkC,GACHI,MAAK,SAAAiB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASpD,QAAQsD,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMrB,MAAK,SAAAC,GACjCA,EAAaqB,aAAatB,MAAK,WAC7BT,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBW,OAAM,WACLlC,QAAQC,IACN,oEArEAkD,CAAwB5B,GAIxBC,UAAUC,cAAcuB,MAAMrB,MAAK,WACjC3B,QAAQC,IACN,gHAMJqB,EAAgBC,OCzCxB6B,K","file":"static/js/main.10fcf495.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toName: '',\n      toEmail: '',\n      subject: '',\n      body: ''\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  submitForm = async () => {\n    try {\n      const emailResponse = await fetch(`https://statz-server.herokuapp.com/api/email`, {\n          method: 'POST',\n          credentials: 'same-origin',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.state)\n        });\n        const email = await emailResponse.json();\n    } catch(e) {\n      console.log(e, \"e\")\n    }\n\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          To Name:\n          <input\n            name=\"toName\"\n            value={this.state.toName}\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <br />\n        <label>\n          To Email:\n          <input\n            name=\"toEmail\"\n            value={this.state.toEmail}\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <label>\n          Email Subject:\n          <input\n            name=\"subject\"\n            value={this.state.subject}\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <label>\n          Email Body:\n          <input\n            name=\"body\"\n            value={this.state.body}\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <button onClick={this.submitForm}>SUBMIT</button>\n      </form>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}